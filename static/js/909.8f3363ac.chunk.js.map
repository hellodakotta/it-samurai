{"version":3,"file":"static/js/909.8f3363ac.chunk.js","mappings":"4QAMMA,EAAkBC,EAAAA,KAAaC,MAAM,CACvCC,MAAOF,EAAAA,KACFE,MAAM,mBACNC,SAAS,YACdC,SAAUJ,EAAAA,KACLK,IAAI,EAAG,iBACPF,SAAS,cA6DlB,EA1DwB,SAAC,GAAD,IAAEG,EAAF,EAAEA,UAAF,OACpB,0BACI,SAAC,KAAD,CACIC,cAAe,CACXL,MAAO,GACPE,SAAU,GACVI,YAAY,GAGhBC,SAAU,SAAAC,GACN,IAAMC,EAAS,CAAC,EAWhB,OAVKD,EAAOR,MAGP,2CAA2CU,KAAKF,EAAOR,SAExDS,EAAOT,MAAQ,yBAJfS,EAAOT,MAAQ,WAMdQ,EAAON,WACRO,EAAOP,SAAW,YAEfO,CACV,EACDE,iBAAkBd,EAClBe,SAAU,SAACJ,EAAD,GAAyC,IAA/BK,EAA8B,EAA9BA,cAAeC,EAAe,EAAfA,UAC/BC,YAAW,WACPX,EAAUI,EAAOR,MAAOQ,EAAON,SAAUM,EAAOF,YAAY,EAAOQ,GACnEE,MAAMC,KAAKC,UAAUV,EAAQ,KAAM,IAEnCK,GAAc,EACjB,GAAE,IACN,EA7BL,SA+BK,gBAAEM,EAAF,EAAEA,OAAQC,EAAV,EAAUA,QAASX,EAAnB,EAAmBA,OAAOY,EAA1B,EAA0BA,aAA1B,OACG,UAAC,KAAD,YACI,iBAAKC,UAAWF,EAAQpB,OAASS,EAAOT,MAAQuB,EAAAA,EAAAA,SAAa,GAA7D,WACI,SAAC,KAAD,CAAOC,KAAK,OAAOC,KAAK,WACxB,SAAC,KAAD,CAAcH,UAAWC,EAAAA,EAAAA,aAAgBE,KAAK,QAAQC,UAAU,YAEpE,iBAAKJ,UAAWF,EAAQlB,UAAYO,EAAOP,SAAWqB,EAAAA,EAAAA,SAAa,GAAnE,WACI,SAAC,KAAD,CAAQC,KAAK,WAAWC,KAAK,cAC7B,SAAC,KAAD,CAAcH,UAAWC,EAAAA,EAAAA,aAAgBE,KAAK,WAAWC,UAAU,YAEvE,4BACI,SAAC,KAAD,CAAOF,KAAM,WAAYC,KAAM,eADnC,mBAIA,yBAAMN,KAEN,mBAAQK,KAAK,SAASG,SAAUN,EAAhC,sBAhBP,KAjCW,ECFxB,EATkB,SAAC,GAAiB,IAAhBjB,EAAe,EAAfA,UAChB,OACI,4BACI,mCACA,SAAC,EAAD,CAAiBA,UAAWA,MAGvC,E,oBCFKwB,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAAA,IAAAA,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,UAAAA,GAID,OAJCA,EAAAA,EAAAA,KAAAA,MAAAA,EAAAA,CAAAA,MAAAA,OAAAA,KAEFxB,UAAY,SAACyB,EAAO3B,EAAUI,EAAYwB,EAASX,GAChD,EAAKY,MAAM3B,UAAUyB,EAAO3B,EAAUI,EAAYwB,EAASX,EAC7D,IASA,OATA,8BAED,WACI,OAAIa,KAAKD,MAAME,QACL,SAAC,KAAD,CAAUC,GAAI,eAGpB,SAAC,EAAD,CAAW9B,UAAW4B,KAAK5B,WAElC,OAbCwB,CAA2BO,EAAAA,WAgBjC,GAAeC,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,IAAQ,KAAM,CAACjC,UAAAA,EAAAA,KACfkC,EAAAA,EAFJ,CAGEV,E,qBC3BF,KAAgB,SAAW,iCAAiC,aAAe,qC","sources":["components/LoginPage/LoginForm/Formik/LoginFormikForm.jsx","components/LoginPage/LoginPage.jsx","components/LoginPage/LoginPageContainer.jsx","webpack://my-app/./src/components/Profile/MyPosts/PostFormikForm/PostFormikForm.module.css?f7a8"],"sourcesContent":["import {ErrorMessage, Field, Form, Formik} from \"formik\";\r\nimport React from \"react\";\r\nimport s from \"../../../Profile/MyPosts/PostFormikForm/PostFormikForm.module.css\";\r\n\r\nimport * as Yup from 'yup';\r\n\r\nconst LoginFormSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n        .email('Incorrect email')\r\n        .required('Required'),\r\n    password: Yup.string()\r\n        .min(6, 'Min 6 symbols')\r\n        .required('Required'),\r\n});\r\n\r\nconst LoginFormikForm = ({userLogin}) => (\r\n    <div>\r\n        <Formik\r\n            initialValues={{\r\n                email: '',\r\n                password: '',\r\n                rememberMe: false\r\n            }\r\n            }\r\n            validate={values => {\r\n                const errors = {};\r\n                if (!values.email) {\r\n                    errors.email = 'Required';\r\n                } else if (\r\n                    !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n                ) {\r\n                    errors.email = 'Invalid email address';\r\n                }\r\n                if (!values.password) {\r\n                    errors.password = 'Required';\r\n                }\r\n                return errors;\r\n            }}\r\n            validationSchema={LoginFormSchema}\r\n            onSubmit={(values, {setSubmitting, setStatus}) => {\r\n                setTimeout(() => {\r\n                    userLogin(values.email, values.password, values.rememberMe, false, setStatus);\r\n                    alert(JSON.stringify(values, null, 2));\r\n                    \r\n                    setSubmitting(false);\r\n                }, 400);\r\n            }}\r\n        >\r\n            {({status, touched, errors,isSubmitting}) => (\r\n                <Form>\r\n                    <div className={touched.email && errors.email ? s.hasError : ''}>\r\n                        <Field type=\"text\" name=\"email\"/>\r\n                        <ErrorMessage className={s.errorMessage} name=\"email\" component=\"div\"/>\r\n                    </div>\r\n                    <div className={touched.password && errors.password ? s.hasError : ''}>\r\n                        <Field  type=\"password\" name=\"password\"/>\r\n                        <ErrorMessage className={s.errorMessage} name=\"password\" component=\"div\"/>\r\n                    </div>\r\n                    <div>\r\n                        <Field type={'checkbox'} name={'rememberMe'} /> Remember me\r\n                    </div>\r\n\r\n                    <div>{status}</div>\r\n\r\n                    <button type=\"submit\" disabled={isSubmitting}>\r\n                        Submit\r\n                    </button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    </div>\r\n);\r\n\r\nexport default LoginFormikForm;","import React from 'react';\r\nimport LoginFormikForm from \"./LoginForm/Formik/LoginFormikForm\";\r\n\r\n\r\nconst LoginPage = ({userLogin}) => {\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginFormikForm userLogin={userLogin}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LoginPage;","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport LoginPage from \"./LoginPage\";\r\nimport {userLogin} from \"../../redux/formReducer\";\r\nimport {Navigate} from \"react-router\";\r\n\r\n\r\nclass LoginPageContainer extends React.Component {\r\n\r\n    userLogin = (login, password, rememberMe, captcha, status) => {\r\n       this.props.userLogin(login, password, rememberMe, captcha, status);\r\n    }\r\n\r\n    render() {\r\n        if (this.props.isAuth) {\r\n           return <Navigate to={'/profile/'} />\r\n        }\r\n        return (\r\n            <LoginPage userLogin={this.userLogin} />\r\n        );\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(null, {userLogin}),\r\n    withAuthRedirect\r\n)(LoginPageContainer);","// extracted by mini-css-extract-plugin\nexport default {\"hasError\":\"PostFormikForm_hasError__ghqmK\",\"errorMessage\":\"PostFormikForm_errorMessage__ox7wD\"};"],"names":["LoginFormSchema","Yup","shape","email","required","password","min","userLogin","initialValues","rememberMe","validate","values","errors","test","validationSchema","onSubmit","setSubmitting","setStatus","setTimeout","alert","JSON","stringify","status","touched","isSubmitting","className","s","type","name","component","disabled","LoginPageContainer","login","captcha","props","this","isAuth","to","React","compose","connect","withAuthRedirect"],"sourceRoot":""}